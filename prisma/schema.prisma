// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

 // datasource db {
 // provider  = "postgresql"
 // url       = env("DATABASE_URL")
 // directUrl = env("DIRECT_URL")
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Admin {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  notificationDevice NotificationDevice[]
  isAdmin            Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model NotificationDevice {
  id                String   @id @default(uuid())
  notificationToken String   @unique
  adminId           String
  admin             Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Vehicle {
  id                      String             @id @unique
  vehicleNumber           String             @unique
  vehicleType             VehicleType
  vehicleRunKM            Float
  vehicleFuelType         FuelType
  vehicleKMLimit          Int
  vehicleNewKm            Float              @default(0.0)
  lastProcessedIndex      Int                @default(0)
  notificationToken       String?
  isOutOfBounds           Boolean            @default(false)
  averageSpeed            Float              @default(0.0)
  maxSpeed                Float              @default(0.0)
  isVehicleUnderRepairing Boolean            @default(false)
  password                String
  vehicleDriver           VehicleDriver?
  vehicleLocation         VehicleLocation[]
  fuelLogs                FuelLog[]
  mileage                 Float              @default(0.0)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  Notification            Notification[]
  RepairingVehicle        RepairingVehicle[]
}

model RepairingVehicle {
  id            String   @id @default(uuid())
  vehicleId     String
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleReason String
  description   String?
  damagePart    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FuelLog {
  id              String   @id @default(uuid())
  vehicleId       String
  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  fuelAmount      Float
  odometerReading Float
  refuelDate      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VehicleDriver {
  id        String   @id @default(uuid())
  vehicleId String   @unique
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleLocation {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  speed     Float
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  time      DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id],onDelete: Cascade)
  title     String
  body      String
  time      DateTime @default(now())
}

enum FuelType {
  Petrol
  Diesel
}

enum VehicleType {
  Motorcycle
  Gypsy
  Tom25
  ALS
  TATRA
  WB
  BUS
  Safari
  Scorpio
}
